1. 能力：
    |- 查阅帮助
    |- 工程能力
        |- UML2
        |- 产品（源代码，部署软件包，文档[安装，部署，用户手册]，PPT产品介绍）
        |- 经验（完整项目经验，晚上知识点的应用的场景）
    |- 编码的能力
        |- 忘记语法
        |- 编程模式
            |-目录结构
                |- 入口 main
                |- 包
                    |- 模块
            |- 应用
                |- main
                    | - App类
                        |- 类
                        |- ....

            |- pyinstaller
                |- 本地程序



2. UML2
    UML=Python=Java=C#
    UML图 5静4动
    类图(类=超函数)
        |- 成员函数-功能
            |- 流程设计-子过程-局部数据->成员变量（局部变量）

        |- 成员变量-数据
            |- 前置条件
            |- 后置条件
            |- 中间数据

        class  ClsA():
            in_data = None

            out_data =None

            def method()->type:
                pass

            def __methos()->type:
                pass

        a = ClsA()
        a.in_data = ???
        a.method()
        re = a.out_data



    类关系
        |- 实体关系（表（：类）中的记录：对象）:E(Entity)R(Relation) : 关联关系
            数据
            简单功能
            |- 单向关系
            |- 双向关系
            |- 自关联关系

        |- 调用关系（Python）
            功能
            数据
            |- 依赖关系
                = 独立，局部
            |- 聚合关系
                = 独立，成员变量
            |- 组合关系
                = 不独立，成员变量

        目的：
            |- 看图
            |- 画图（OOA&D）
    工具：
        |- Rotional Rose
        |- PowerDesign
        |-

    结果：
        |- 形成自己的应用模式


3. 微信聊天
    设计模式：
        main
        App类（组合各种类，形成业务流程）
            |- 类
                |- ...
            |- 类



作业：
    画一个类
       |- 成员变量与成员函数
       |- + - #

4. UI设计
    
5. 使用UI

6. 使用组合构成应用结构
    class A:
        def __init__(self):
            a = B() 
            b = C()


作业：
    重新建立项目重复上课的内容。

